provider "aws" {
  region = "ap-south-1"
}

# ------------------ VARIABLES ------------------

variable "vpc_cidr" {
  default = "192.168.0.0/16"
}

variable "pubsub_cidr" {
  default = "192.168.1.0/23"
}

variable "pubsub1_cidr" {
  default = "192.168.2.0/23"
}

variable "pvtsub_cidr" {
  default = "192.168.3.0/23"
}

variable "instance_type" {
  default = "t2.medium"
}

variable "ami_id" {
  default = "ami-0123456789abcdef0"
}

variable "key_name" {
  default = "aws_key"
}

variable "zone1" {
  default = "ap-south-1a"
}

variable "zone2" {
  default = "ap-south-1b"
}

# ------------------ NETWORKING ------------------

resource "aws_vpc" "myvpc" {
  cidr_block = var.vpc_cidr
  tags = {
    Name = "myvpc"
  }
}

resource "aws_subnet" "pubsub" {
  cidr_block              = var.pubsub_cidr
  vpc_id                  = aws_vpc.myvpc.id
  map_public_ip_on_launch = true
  availability_zone       = var.zone1
  tags = {
    Name = "pubsub"
  }
}

resource "aws_subnet" "pubsub1" {
  cidr_block              = var.pubsub1_cidr
  vpc_id                  = aws_vpc.myvpc.id
  map_public_ip_on_launch = true
  availability_zone       = var.zone2
  tags = {
    Name = "pubsub1"
  }
}

resource "aws_subnet" "pvtsub" {
  cidr_block              = var.pvtsub_cidr
  vpc_id                  = aws_vpc.myvpc.id
  map_public_ip_on_launch = false
  availability_zone       = var.zone2
  tags = {
    Name = "pvtsub"
  }
}

resource "aws_internet_gateway" "mygtw" {
  vpc_id = aws_vpc.myvpc.id
  tags = {
    Name = "mygtw"
  }
}

resource "aws_eip" "nateip" {
  domain = "vpc"
}

resource "aws_nat_gateway" "mynatgtw" {
  subnet_id     = aws_subnet.pubsub.id
  allocation_id = aws_eip.nateip.id
  tags = {
    Name = "mynatgtw"
  }
}

# ------------------ ROUTE TABLES ------------------

resource "aws_route_table" "pubrt" {
  vpc_id = aws_vpc.myvpc.id

  route {
    cidr_block = "0.0.0.0/0"
    gateway_id = aws_internet_gateway.mygtw.id
  }

  tags = {
    Name = "pubrt"
  }
}

resource "aws_route_table" "pvtrt" {
  vpc_id = aws_vpc.myvpc.id

  route {
    cidr_block     = "0.0.0.0/0"
    nat_gateway_id = aws_nat_gateway.mynatgtw.id
  }

  tags = {
    Name = "pvtrt"
  }
}

resource "aws_route_table_association" "pubrttopubsub" {
  subnet_id      = aws_subnet.pubsub.id
  route_table_id = aws_route_table.pubrt.id
}

resource "aws_route_table_association" "pubrttopubsub1" {
  subnet_id      = aws_subnet.pubsub1.id
  route_table_id = aws_route_table.pubrt.id
}

resource "aws_route_table_association" "pvtrttopvtsub" {
  subnet_id      = aws_subnet.pvtsub.id
  route_table_id = aws_route_table.pvtrt.id
}

# ------------------ SECURITY GROUPS ------------------

# Load Balancer SG
resource "aws_security_group" "lbsg" {
  vpc_id = aws_vpc.myvpc.id

  dynamic "ingress" {
    for_each = [22, 80, 443]
    content {
      from_port   = ingress.value
      to_port     = ingress.value
      protocol    = "tcp"
      cidr_blocks = ["0.0.0.0/0"]
    }
  }

  egress {
    from_port   = 0
    to_port     = 0
    protocol    = "-1"
    cidr_blocks = ["0.0.0.0/0"]
  }

  tags = {
    Name = "lbsg"
  }
}

# Web Tier SG
resource "aws_security_group" "websg" {
  vpc_id = aws_vpc.myvpc.id

  dynamic "ingress" {
    for_each = [22, 80, 443]
    content {
      from_port       = ingress.value
      to_port         = ingress.value
      protocol        = "tcp"
      security_groups = [aws_security_group.lbsg.id]
    }
  }

  egress {
    from_port   = 0
    to_port     = 0
    protocol    = "-1"
    cidr_blocks = ["0.0.0.0/0"]
  }

  tags = {
    Name = "websg"
  }
}

# App Tier SG
resource "aws_security_group" "appsg" {
  vpc_id = aws_vpc.myvpc.id

  dynamic "ingress" {
    for_each = [22, 80, 443]
    content {
      from_port       = ingress.value
      to_port         = ingress.value
      protocol        = "tcp"
      security_groups = [aws_security_group.websg.id]
    }
  }

  egress {
    from_port   = 0
    to_port     = 0
    protocol    = "-1"
    cidr_blocks = ["0.0.0.0/0"]
  }

  tags = {
    Name = "appsg"
  }
}

# ------------------ INSTANCES ------------------

resource "aws_instance" "web1" {
  ami                         = var.ami_id
  key_name                    = var.key_name
  subnet_id                   = aws_subnet.pubsub.id
  instance_type               = var.instance_type
  vpc_security_group_ids      = [aws_security_group.websg.id]
  associate_public_ip_address = true

  tags = {
    Name = "web1"
  }
}

resource "aws_instance" "web2" {
  ami                         = var.ami_id
  key_name                    = var.key_name
  subnet_id                   = aws_subnet.pubsub1.id
  instance_type               = var.instance_type
  vpc_security_group_ids      = [aws_security_group.websg.id]
  associate_public_ip_address = true

  tags = {
    Name = "web2"
  }
}

resource "aws_instance" "app" {
  ami                    = var.ami_id
  key_name               = var.key_name
  subnet_id              = aws_subnet.pvtsub.id
  instance_type          = var.instance_type
  vpc_security_group_ids = [aws_security_group.appsg.id]

  tags = {
    Name = "app"
  }
}

# ------------------ LOAD BALANCER ------------------

resource "aws_lb" "mylb" {
  name               = "mylb"
  internal           = false
  load_balancer_type = "application"
  security_groups    = [aws_security_group.lbsg.id]
  subnets            = [aws_subnet.pubsub.id, aws_subnet.pubsub1.id]

  tags = {
    Name = "mylb"
  }
}

resource "aws_lb_target_group" "mytgp" {
  name     = "mytgp"
  port     = 80
  protocol = "HTTP"
  vpc_id   = aws_vpc.myvpc.id

  health_check {
    path = "/"
    port = "traffic-port"
  }
}

resource "aws_lb_target_group_attachment" "webtgp1" {
  target_group_arn = aws_lb_target_group.mytgp.arn
  target_id        = aws_instance.web1.id
  port             = 80
}

resource "aws_lb_target_group_attachment" "webtgp2" {
  target_group_arn = aws_lb_target_group.mytgp.arn
  target_id        = aws_instance.web2.id
  port             = 80
}

resource "aws_lb_listener" "mylistener" {
  load_balancer_arn = aws_lb.mylb.arn
  port              = 80
  protocol          = "HTTP"

  default_action {
    target_group_arn = aws_lb_target_group.mytgp.arn
    type             = "forward"
  }
}

output "lb_dns" {
  value = aws_lb.mylb.dns_name
}
